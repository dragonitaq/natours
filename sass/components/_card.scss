.card {
  /* ############################## FUNCTIONALITY ############################# */

  /* The perspective property is used to give a 3D-positioned element some perspective.
  The perspective property defines how far the object is away from the user. So, a lower value will result in a more intensive 3D effect than a higher value.
  When defining the perspective property for an element, it is the CHILD elements that get the perspective view, NOT the element itself. */
  perspective: 150rem;
  -moz-perspective: 150rem;
  // position: relative;
  height: 52rem;

  display: grid;
  grid-template-columns: 1fr;

  &__side {
    /* When we use absolute positioning here, it induces float effect. But this case, we don't have explicitly define float here, so, this can't simply solve by using clearfix. We have to explicitly set height for it. We also need to set height to its parrent too. */
    height: 52rem;
    transition: all 0.8s ease;
    grid-area: 1/1/2/2;
    // position: absolute;
    // top: 0;
    // left: 0;
    width: 100%;
    /* Hide the back part of the element. We need prefit for safari. */
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    border-radius: 3px;
    /* This is to prevent the image inside it overflow causing border-radius gone. */
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &--front {
      background-color: $color-white;
    }

    &--back {
      /* This will make the backside of card starts at a "flipped" state. */
      transform: rotateY(180deg);

      &-1 {
        background-image: linear-gradient(to right bottom, $color-secondary-light, $color-secondary-dark);
      }

      &-2 {
        background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark);
      }

      &-3 {
        background-image: linear-gradient(to right bottom, $color-tertiary-light, $color-tertiary-dark);
      }
    }
  }

  /* We flip the front card to font */
  &:hover &__side--front {
    transform: rotateY(-180deg);
  }

  /* We flip the back card to front */
  &:hover &__side--back {
    transform: rotateY(0);
  }

  /* ########################### FRONT SIDE STYLING ########################### */

  &__picture {
    background-size: cover;
    height: 23rem;
    /* To blend 2 background images together. */
    background-blend-mode: screen;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    /* Because the clip-path creates a stacking context, thus the "overflow: hidden;" doesn't work anymore. We need to manually set the radius like below. But I think we can set a z-index here to solve it as well. */
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;

    &--1 {
      background-image: linear-gradient(to right bottom, $color-secondary-light, $color-secondary-dark), url(../img/nat-5.jpg);
    }

    &--2 {
      background-image: linear-gradient(to right bottom, $color-primary-light, $color-primary-dark), url(../img/nat-6.jpg);
    }

    &--3 {
      background-image: linear-gradient(to right bottom, $color-tertiary-light, $color-tertiary-dark), url(../img/nat-7.jpg);
    }
  }

  &__heading {
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    text-align: right;
    color: $color-white;
    position: absolute;
    top: 12rem;
    right: 2rem;
    width: 75%;
  }

  /* We don't nest inside &__heading because these are not the child of it. We only nest if they are childs. */
  &__heading-span {
    padding: 1rem 1.5rem;
    /* This specifies how the background, padding, border, border-image, box-shadow, margin, and clip-path of an element is applied when the box for the element is fragmented. */
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;

    &--1 {
      background-image: linear-gradient(to right bottom, rgba($color-secondary-light, 0.85), rgba($color-secondary-dark, 0.85));
    }

    &--2 {
      background-image: linear-gradient(to right bottom, rgba($color-primary-light, 0.85), rgba($color-primary-dark, 0.85));
    }

    &--3 {
      background-image: linear-gradient(to right bottom, rgba($color-tertiary-light, 0.85), rgba($color-tertiary-dark, 0.85));
    }
  }

  &__details {
    padding: 3rem;

    ul {
      list-style: none;
      width: 80%;
      margin: 0 auto;

      li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem;

        &:not(:last-child) {
          border-bottom: 1px solid $color-grey-light-2;
        }
      }
    }
  }

  /* ############################ BACK SIDE STYLING ########################### */

  &__cta {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    flex-grow: 1;
    height: 52rem;

    // position: absolute;
    // top: 50%;
    // left: 50%;
    // /* To make the element center. */
    // transform: translate(-50%, -50%);
    // width: 90%;
    // text-align: center;
  }

  &__price-box {
    text-align: center;
    color: $color-white;
    margin-bottom: 8rem;
  }

  &__price-only {
    font-size: 1.4rem;
    text-transform: uppercase;
  }

  &__price-value {
    font-size: 6rem;
    font-weight: 100;
  }

  /* ########################################################################## */
  /*                                 Media query                                */
  /* ########################################################################## */

  /* Here we specify that if the device is with width <= 900px OR is NOT a touch device, then the code will apply. We also can do the other way round by specifying (hover: hover) for device with touch feature.
  But what if the device (like laptop) has touch screen & mouse ? */
  // @include respond(tab-port) {
  @media (max-width: 56.25em), (hover: none) {
    height: auto;
    display: flex;
    flex-direction: column;
    border-radius: 3px;
    background-color: $color-white;
    box-shadow: 0 1.5rem 4rem rgba($color-black, 0.15);

    &__side {
      box-shadow: none;
      transition: none;

      &--back {
        /* This will make the backside of card starts at original "unflipped" state. */
        transform: rotateY(0deg);
        height: auto;
        -webkit-clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%);
        clip-path: polygon(0 15%, 100% 0, 100% 100%, 0 100%);
        margin-top: -3rem;
      }
    }
    &__cta {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      height: auto;
      margin-top: -2rem;

      a {
        margin-bottom: 5rem;
      }
    }

    &__price-box {
      margin-top: 7rem;
      margin-bottom: 1rem;
    }

    &__price-value {
      font-size: 5rem;
    }
  }
}
